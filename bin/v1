#!/usr/bin/env coffee
# vim:ft=coffee ts=2 sw=2 et :
# -*- mode:coffee -*-

Fs       = require 'fs'
Path     = require 'path'
{Task, Story} = require("../src/version-one")
_s = require('underscore.string')
program = require('commander')
Yaml = require('js-yaml') # parse the yaml config and members

red   = '\u001b[31m'
blue  = '\u001b[34m'
yellow = '\u001b[33m'
reset = '\u001b[0m'

# get all members
program
  .command('members')
  .description('get version one members')
  .option('-r, --reload [false]', 'reload members',false)
  .action (options) ->
    Task.members (options.reload),(members)->
      console.log members


# tasks
program
  .command('tasks')
  .description('get version one assets')
  .option("-o, --owner [owner name]", "Owner of this task")
  .option("-s, --status [status]", "Task status")
  .option("-t, --sprint [sprint]", "Task status")
  .action (options) ->
    owner = options.owner || ""
    status = options.status || ""
    number = options.number || ""
    sprint = options.sprint || ""
    # task filter
    filter = (t)->
      _s.include(t.member.toLowerCase(),owner.toLowerCase()) and _s.include(t.status.toLowerCase(),status.toLowerCase()) and _s.include(t.sprint,sprint)
    console.log Array(100).join("*")
    Task.all (tasks)->
      grouped_tasks = {}
      tasks.filter(filter).map (a)->
        grouped_tasks[a.parent_id] ||= []
        grouped_tasks[a.parent_id].push a
      for sid,ts of grouped_tasks
        Story.find sid,(ps)->
          result = ""
          result += ps.toString()
          for s in grouped_tasks[ps.id.split(":")[1]]
            result += s.toString()
          result += Array(100).join("-") + "\n"
          console.log result


program
  .command('task')
  .description('get version one assets')
  .option("-n, --number [task number]", "Task number")
  .action (options) ->
    Task.find options.number, (t)->
      console.log t.toString()


program
  .command('stories')
  .description('get all stories')
  .option('-r, --reload [false]', 'reload members',false)
  .action (options) ->
    Story.all (stories)->
      for story in stories
        console.log story.toString()



program
  .command('story')
  .description('get story with number')
  .option('-n, --number [number]', 'get story by number')
  .action (options) ->
    Story.find options.number, (story)->
      console.log story.toString()


program
  .command('update [asset]')
  .description("update story or task")
  .option('-n --number [task_number]', 'task number')
  .action (asset, options) ->
    # get the task
    Task.find options.number, (task)->
      console.log "Are you going to update this task:"
      console.log task.toString()
      attributes_list = ['ToDo', 'Description']
      console.log "Choose which attribute you want to update: "
      program.choose attributes_list, (i)->
        console.log "You choose update #{attributes_list[i]}"
        program.prompt "Update to: ", (value)->
          program.confirm "Sure about update #{yellow}#{attributes_list[i]}#{reset} to #{red}#{value}#{reset}? ",(ok)->
            if ok
              console.log "Updating ..................."
              Task.updateAttribute options.number, attributes_list[i], value, (result)->
                console.log result
            else
              console.log "abort updating..."
            process.stdin.destroy()

program.parse(process.argv)


